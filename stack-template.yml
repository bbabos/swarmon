version: "3.3"

networks:
  net:
    driver: overlay
    attachable: true

volumes:
  prometheus: {}
  grafana: {}
  alertmanager: {}

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

services:
  dockerd-exporter:
    image: babobene/dockerd-exporter:{{.TAG}}
    networks:
      - net
    environment:
      - GW_BRIDGE_IP={{.GW_BRIDGE_IP}}
      - METRIC_PORT={{.METRIC_PORT}}
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: babobene/node-exporter:{{.TAG}}
    networks:
      - net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /Users/bencebabos/hostname:/etc/nodename # TODO => for testing only
      # - /etc/hostname:/etc/nodename
    command:
      - --path.sysfs=/host/sys
      - --path.procfs=/host/proc
      - --collector.textfile.directory=/etc/node-exporter/
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
      - --no-collector.ipvs
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: google/cadvisor:v0.33.0
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      # - /cgroup:/cgroup:ro  # may need for centos or rhel
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: babobene/prometheus:{{.TAG}}
    networks:
      - net
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-24h}
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 128M
      labels:
        - traefik.http.routers.prometheus.rule=Host(`prometheus.{{.DOMAIN}}`)
        - traefik.http.services.prometheus-service.loadbalancer.server.port=9090
        - traefik.http.middlewares.prometheus-auth.basicauth.users={{.ADMIN_USER}}:{{.TRAEFIK_ADMIN_PW}}
        - traefik.http.routers.prometheus.middlewares=prometheus-auth
        - constraint={{.STACKNAME}}

  grafana:
    image: babobene/grafana:{{.TAG}}
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER={{.ADMIN_USER}}
      - GF_SECURITY_ADMIN_PASSWORD={{.ADMIN_PASSWORD}}
      - GF_SERVER_ROOT_URL={{.SCHEMA}}://grafana.{{.DOMAIN}}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.http.routers.grafana.rule=Host(`grafana.{{.DOMAIN}}`)
        - traefik.http.services.grafana-service.loadbalancer.server.port=3000
        - constraint={{.STACKNAME}}

  alertmanager:
    image: babobene/alertmanager:{{.TAG}}
    networks:
      - net
    environment:
      - SLACK_URL={{.SLACK_URL}}
      - SLACK_USER={{.SLACK_USER}}
      - DOMAIN={{.DOMAIN}}
      - SCHEMA={{.SCHEMA}}
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  karma:
    image: lmierzwa/karma:v0.55
    networks:
      - net
    environment:
      - ALERTMANAGER_URI={{.SCHEMA}}://alertmanager:9093
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.http.routers.karma.rule=Host(`karma.{{.DOMAIN}}`)
        - traefik.http.services.karma-service.loadbalancer.server.port=8080
        - traefik.http.middlewares.karma-auth.basicauth.users={{.ADMIN_USER}}:{{.TRAEFIK_ADMIN_PW}}
        - traefik.http.routers.karma.middlewares=karma-auth
        - constraint={{.STACKNAME}}

  traefik:
    image: traefik:v2.1
    networks:
      - net
    ports:
      - {{.PORT}}:80
    command:
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.watch
      - --providers.docker.swarmMode=true
      - --providers.docker.constraints=Label(`constraint`,`{{.STACKNAME}}`)
      - --entryPoints.web.address=:80
      # - --entryPoints.web.forwardedHeaders.trustedIPs=172.31.0.0/16,10.255.0.0/16
      - --entryPoints.web.forwardedHeaders.insecure # TODO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
