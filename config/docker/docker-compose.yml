version: "3.6"

networks:
  monitor_net:
    driver: overlay
    attachable: true

volumes:
  prometheus: {}
  grafana: {}
  alertmanager: {}

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

services:
  dockerd-exporter:
    image: babobene/dockerd-exporter:{{.Tag}}
    networks:
      - monitor_net
    environment:
      GW_BRIDGE_IP: {{.Docker.GwBridgeIP}}
      METRIC_PORT: {{.Docker.MetricPort}}
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: babobene/node-exporter:{{.Tag}}
    networks:
      - monitor_net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - --path.sysfs=/host/sys
      - --path.procfs=/host/proc
      - --collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)
      - --collector.textfile.directory=/etc/node-exporter/
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    networks:
      - monitor_net
    command: -logtostderr -docker_only
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      {{.Cgroup}} # may need for centos or rhel
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: babobene/prometheus:{{.Tag}}
    networks:
      - monitor_net
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-24h}
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 128M
      labels:
        traefik.http.routers.prometheus.rule: Host(`prometheus.{{.Domain}}`)
        traefik.http.services.prometheus-service.loadbalancer.server.port: 9090
        traefik.http.middlewares.prometheus-auth.basicauth.users: {{.Traefik.BAUser}}:{{.Traefik.BAPassword}}
        traefik.http.routers.prometheus.middlewares: prometheus-auth
        constraint: {{.Docker.StackName}}

  grafana:
    image: babobene/grafana:{{.Tag}}
    networks:
      - monitor_net
    environment:
      GF_SECURITY_ADMIN_USER: {{.AdminUser.Name}}
      GF_SECURITY_ADMIN_PASSWORD: {{.AdminUser.Password}}
      GF_SERVER_ROOT_URL: {{.Schema}}://grafana.{{.Domain}}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        traefik.http.routers.grafana.rule: Host(`grafana.{{.Domain}}`)
        traefik.http.services.grafana-service.loadbalancer.server.port: 3000
        constraint: {{.Docker.StackName}}

  alertmanager:
    image: babobene/alertmanager:{{.Tag}}
    networks:
      - monitor_net
    environment:
      SLACK_URL: {{.Slack.Webhook}}
      SLACK_USER: {{.Slack.AlertUser}}
      DOMAIN: {{.Domain}}
      SCHEMA: {{.Schema}}
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        traefik.http.routers.alerts.rule: Host(`alerts.{{.Domain}}`)
        traefik.http.services.alerts-service.loadbalancer.server.port: 9093
        traefik.http.middlewares.alerts-auth.basicauth.users: {{.Traefik.BAUser}}:{{.Traefik.BAPassword}}
        traefik.http.routers.alerts.middlewares: alerts-auth
        constraint: {{.Docker.StackName}}

  traefik:
    image: traefik:v2.2
    networks:
      - monitor_net
    ports:
      - {{.Traefik.Port}}:80
    command:
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.watch
      - --providers.docker.swarmMode=true
      - --providers.docker.constraints=Label(`constraint`,`{{.Docker.StackName}}`)
      - --entryPoints.web.address=:80
      - --entryPoints.web.forwardedHeaders.insecure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
